<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-persist-*.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!--指定字符集-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!--强制请求设置字符集-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--强制响应设置字符集-->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!--这个filter执行顺序要在其他filter前面-->
    <!--原因
    request.setCharacterEncoding(encoding);必须在request.getParameter前面
    response.setCharacterEncoding(encoding);必须在response.getWriter()前面
    -->
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <servlet>
        <servlet-name>SpringMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath*:spring-web-mvc.xml</param-value>
        </init-param>
        <!--Servlet默认生命周期中,创建对象是在第一次接受到请求时-->
        <!--DispatcherServlet创建对象后有大量的框架初始化工作,不适合第一次请求时来做-->
        <!--设置load-on-startup目的就是为了让DispatcherServlet在web应用启动时创建对象,初始化-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>SpringMVC</servlet-name>
        <!--url-pattern配置方式:/表示拦截所有请求-->
        <!--<url-pattern>/</url-pattern>-->
        <!--url-pattern配置方式:配置请求扩展名-->
        <!--优点:xxx.css,xxx.js,xxx.png等静态资源完全不经过SpringMVC,不需要特殊处理-->
        <!--优点:可以实现伪静态效果,表名上访问的是一个html文件静态资源,但实际返回的是java代码运算的结果-->

        <!--伪静态作用1:给黑客入侵增加难度-->
        <!--伪静态作用2:有利于SEO优化(让谷歌,百度等搜索引擎更容易找到项目) -->
        <!--伪静态缺点:不符合RESTFul风格-->
        <url-pattern>*.html</url-pattern>
        <!--如果一个Ajax请求扩展名是html,但实际服务器给浏览器返回的是json数据,二者不匹配就会出现406错误-->
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>
</web-app>